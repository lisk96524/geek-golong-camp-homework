// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/week4/week4.proto

package week4

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Week4Client is the client API for Week4 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Week4Client interface {
	CreateWeek4(ctx context.Context, in *CreateWeek4Request, opts ...grpc.CallOption) (*CreateWeek4Reply, error)
	UpdateWeek4(ctx context.Context, in *UpdateWeek4Request, opts ...grpc.CallOption) (*UpdateWeek4Reply, error)
	DeleteWeek4(ctx context.Context, in *DeleteWeek4Request, opts ...grpc.CallOption) (*DeleteWeek4Reply, error)
	GetWeek4(ctx context.Context, in *GetWeek4Request, opts ...grpc.CallOption) (*GetWeek4Reply, error)
	ListWeek4(ctx context.Context, in *ListWeek4Request, opts ...grpc.CallOption) (*ListWeek4Reply, error)
}

type week4Client struct {
	cc grpc.ClientConnInterface
}

func NewWeek4Client(cc grpc.ClientConnInterface) Week4Client {
	return &week4Client{cc}
}

func (c *week4Client) CreateWeek4(ctx context.Context, in *CreateWeek4Request, opts ...grpc.CallOption) (*CreateWeek4Reply, error) {
	out := new(CreateWeek4Reply)
	err := c.cc.Invoke(ctx, "/api.week4.Week4/CreateWeek4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *week4Client) UpdateWeek4(ctx context.Context, in *UpdateWeek4Request, opts ...grpc.CallOption) (*UpdateWeek4Reply, error) {
	out := new(UpdateWeek4Reply)
	err := c.cc.Invoke(ctx, "/api.week4.Week4/UpdateWeek4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *week4Client) DeleteWeek4(ctx context.Context, in *DeleteWeek4Request, opts ...grpc.CallOption) (*DeleteWeek4Reply, error) {
	out := new(DeleteWeek4Reply)
	err := c.cc.Invoke(ctx, "/api.week4.Week4/DeleteWeek4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *week4Client) GetWeek4(ctx context.Context, in *GetWeek4Request, opts ...grpc.CallOption) (*GetWeek4Reply, error) {
	out := new(GetWeek4Reply)
	err := c.cc.Invoke(ctx, "/api.week4.Week4/GetWeek4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *week4Client) ListWeek4(ctx context.Context, in *ListWeek4Request, opts ...grpc.CallOption) (*ListWeek4Reply, error) {
	out := new(ListWeek4Reply)
	err := c.cc.Invoke(ctx, "/api.week4.Week4/ListWeek4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Week4Server is the server API for Week4 service.
// All implementations must embed UnimplementedWeek4Server
// for forward compatibility
type Week4Server interface {
	CreateWeek4(context.Context, *CreateWeek4Request) (*CreateWeek4Reply, error)
	UpdateWeek4(context.Context, *UpdateWeek4Request) (*UpdateWeek4Reply, error)
	DeleteWeek4(context.Context, *DeleteWeek4Request) (*DeleteWeek4Reply, error)
	GetWeek4(context.Context, *GetWeek4Request) (*GetWeek4Reply, error)
	ListWeek4(context.Context, *ListWeek4Request) (*ListWeek4Reply, error)
	mustEmbedUnimplementedWeek4Server()
}

// UnimplementedWeek4Server must be embedded to have forward compatible implementations.
type UnimplementedWeek4Server struct {
}

func (UnimplementedWeek4Server) CreateWeek4(context.Context, *CreateWeek4Request) (*CreateWeek4Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWeek4 not implemented")
}
func (UnimplementedWeek4Server) UpdateWeek4(context.Context, *UpdateWeek4Request) (*UpdateWeek4Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWeek4 not implemented")
}
func (UnimplementedWeek4Server) DeleteWeek4(context.Context, *DeleteWeek4Request) (*DeleteWeek4Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWeek4 not implemented")
}
func (UnimplementedWeek4Server) GetWeek4(context.Context, *GetWeek4Request) (*GetWeek4Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeek4 not implemented")
}
func (UnimplementedWeek4Server) ListWeek4(context.Context, *ListWeek4Request) (*ListWeek4Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWeek4 not implemented")
}
func (UnimplementedWeek4Server) mustEmbedUnimplementedWeek4Server() {}

// UnsafeWeek4Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Week4Server will
// result in compilation errors.
type UnsafeWeek4Server interface {
	mustEmbedUnimplementedWeek4Server()
}

func RegisterWeek4Server(s grpc.ServiceRegistrar, srv Week4Server) {
	s.RegisterService(&Week4_ServiceDesc, srv)
}

func _Week4_CreateWeek4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWeek4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Week4Server).CreateWeek4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.week4.Week4/CreateWeek4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Week4Server).CreateWeek4(ctx, req.(*CreateWeek4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Week4_UpdateWeek4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWeek4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Week4Server).UpdateWeek4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.week4.Week4/UpdateWeek4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Week4Server).UpdateWeek4(ctx, req.(*UpdateWeek4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Week4_DeleteWeek4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWeek4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Week4Server).DeleteWeek4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.week4.Week4/DeleteWeek4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Week4Server).DeleteWeek4(ctx, req.(*DeleteWeek4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Week4_GetWeek4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeek4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Week4Server).GetWeek4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.week4.Week4/GetWeek4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Week4Server).GetWeek4(ctx, req.(*GetWeek4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Week4_ListWeek4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWeek4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Week4Server).ListWeek4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.week4.Week4/ListWeek4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Week4Server).ListWeek4(ctx, req.(*ListWeek4Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Week4_ServiceDesc is the grpc.ServiceDesc for Week4 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Week4_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.week4.Week4",
	HandlerType: (*Week4Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWeek4",
			Handler:    _Week4_CreateWeek4_Handler,
		},
		{
			MethodName: "UpdateWeek4",
			Handler:    _Week4_UpdateWeek4_Handler,
		},
		{
			MethodName: "DeleteWeek4",
			Handler:    _Week4_DeleteWeek4_Handler,
		},
		{
			MethodName: "GetWeek4",
			Handler:    _Week4_GetWeek4_Handler,
		},
		{
			MethodName: "ListWeek4",
			Handler:    _Week4_ListWeek4_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/week4/week4.proto",
}
